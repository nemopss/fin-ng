definitions:
  models.Category:
    properties:
      id:
        type: integer
      name:
        type: string
      user_id:
        type: integer
    type: object
  models.CreateCategory:
    properties:
      name:
        type: string
    type: object
  models.CreateTransaction:
    properties:
      amount:
        type: number
      category_id:
        type: integer
      type:
        type: string
    type: object
  models.CreateUser:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: error
        type: string
    type: object
  models.GetTransactionsResponse:
    properties:
      total:
        example: 100
        type: integer
      transactions:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
    type: object
  models.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.RegisterResponse:
    properties:
      id:
        example: 1
        type: integer
      username:
        example: john_doe
        type: string
    type: object
  models.Transaction:
    properties:
      amount:
        type: number
      category_id:
        type: integer
      date:
        type: string
      id:
        type: integer
      type:
        type: string
      user_id:
        type: integer
    type: object
  models.UpdateCategoryResponse:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Food
        type: string
      user_id:
        example: 1
        type: integer
    type: object
info:
  contact: {}
paths:
  /categories:
    get:
      description: Получает список категорий пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получить список категорий
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Создает новую категорию для пользователя
      parameters:
      - description: Данные категории
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Создать новую категорию
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Удаляет категорию пользователя, если она не используется в транзакциях
      parameters:
      - description: ID категории
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Удалить категорию
      tags:
      - categories
    get:
      description: Получает категорию пользователя по ID
      parameters:
      - description: ID категории
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получить категорию
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Обновляет существующую категорию пользователя
      parameters:
      - description: ID категории
        in: path
        name: id
        required: true
        type: integer
      - description: Новое имя категории
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Обновить категорию
      tags:
      - categories
  /login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя и возвращает JWT токен
      parameters:
      - description: Данные пользователя
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Вход пользователя
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя с именем пользователя и паролем
      parameters:
      - description: Данные пользователя
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - auth
  /transactions:
    get:
      description: Получает список транзакций пользователя с возможностью фильтрации
        и пагинации
      parameters:
      - description: Тип транзакции (income или expense)
        in: query
        name: type
        type: string
      - description: ID категории
        in: query
        name: category_id
        type: integer
      - description: Минимальная сумма
        in: query
        name: min_amount
        type: number
      - description: Максимальная сумма
        in: query
        name: max_amount
        type: number
      - description: Сортировка по дате (asc или desc)
        in: query
        name: sort
        type: string
      - description: Номер страницы
        in: query
        name: page
        type: integer
      - description: Лимит на страницу
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetTransactionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получить список транзакций
      tags:
      - transactions
    post:
      consumes:
      - application/json
      description: Создает новую транзакцию для пользователя
      parameters:
      - description: Данные транзакции
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.CreateTransaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Создать новую транзакцию
      tags:
      - transactions
  /transactions/{id}:
    delete:
      description: Удаляет транзакцию пользователя
      parameters:
      - description: ID транзакции
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Удалить транзакцию
      tags:
      - transactions
    get:
      description: Получает детали конкретной транзакции пользователя
      parameters:
      - description: ID транзакции
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получить транзакцию по ID
      tags:
      - transactions
    put:
      consumes:
      - application/json
      description: Обновляет существующую транзакцию пользователя
      parameters:
      - description: ID транзакции
        in: path
        name: id
        required: true
        type: integer
      - description: Новые данные транзакции
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.CreateTransaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Обновить транзакцию
      tags:
      - transactions
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
